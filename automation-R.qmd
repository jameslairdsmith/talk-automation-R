---
format:
  revealjs: 
    slide-number: true
    css: styles.css
    slide-level: 3
    mouse-wheel: true
    execute:
      echo: true
      warning: false
    output-file: index.html
    show-notes: false
---

## Automating tasks with R {style="margin-top: 2em;"}

::: {style="margin-bottom: 1em; font-size: 0.75em"}
James Laird-Smith

Data Scientist, Bank of England
:::

```{r}
#| include: false
old.hooks <- fansi::set_knit_hooks(knitr::knit_hooks)
options(crayon.enabled=TRUE)
```

<!-- ::: {style="margin-top: 8em; margin-bottom: 1em; font-size: 0.5em; color: grey"} -->
<!-- - Link to slides: [talk-automation-R.jameslairdsmith.com/](https://talk-automation-R.jameslairdsmith.com/) -->
<!-- - Github repo for talk: [jameslairdsmith/talk-automation-R](https://github.com/jameslairdsmith/talk-automation-R) -->
<!-- ::: -->

::: {style="font-size:0.5em"}
- Link to slides: [talk-automation-R.jameslairdsmith.com/](https://talk-automation-R.jameslairdsmith.com/)
- Github repo for talk: [jameslairdsmith/talk-automation-R](https://github.com/jameslairdsmith/talk-automation-R)
:::

![](https://upload.wikimedia.org/wikipedia/en/thumb/7/72/Bank_of_England_logo.svg/400px-Bank_of_England_logo.svg.png?20220630040920){.absolute width="300" height="300" right=150 top="150"}

## Agenda

- Why learn to automate?
- What tools are available for automation?
- The future?

## Why learn automation? {.smaller}

Automation is the logical extension of coding.


:::{.callout-note icon=false appearance="minimal"}
Given that you have some operation.
:::

. . .

<u>Step 1: Re-write in code</u>

- Pain: Learn to code
- Gain: Can then re-run at zero effort (among other things)

. . .

<u>Step 2: Automate</u>

- Pain: Learn an automation tool
- Gain: Can then re-run at zero effort **even when you are not there**

::: {.notes}
I see automation as the logical extension of coding.
It is particularly important for organisations.
Because this is a data science conference, we not only care about automating, but
automating in a data context.
:::

## How can you automate? {.smaller}

:::{.callout-note}
R itself is not an automation tool. 
Rather, it interfaces with other purpose-built tools.
:::

- Cron
- Apache Airflow
- Windows Task Scheduler
- RStudio Connect
- Jenkins
- Github actions
- Many more...

**R does have tools for interfacing with these.**

::: {.notes}
No programming language is actually an automation tool.

To have an automation tool, you need an always on server with a daemon running in the background.

I'm betting that for many of you, automation is something hidden away, mysterious.

Varying levels of maturity and sophistication.

These each have their pros and cons.
:::

## What would an ideal automation tool look like? {.smaller}

- Simple to use.
- Feature rich.
  - Triggers (or listeners).
  
. . .

- Strong visualisation.
- Language agnostic? Or at least work with R?
- Free and open source with no vendor lock-in.
- Developer friendly.
  - Have an API.

## Cron {.smaller}

> In the beginning God created the heavens and the earth ... but also the Cron utility for Unix.^[Gospel according to James.]

. . .

::: {.incremental}
- Very old, widely used and well understood.
  - If you are running MacOS or Linux, it's likely already on your computer.
- Minimal and easy to get started with.
- Cron syntax is the lingua franca of automation. Other tools will accept it as input.
:::

<br>
<br>
<br>

::: {.notes}
I think Cron is a good tool to get started with.
:::



## Cron expressions {.smaller}

Cron has it's own syntax for job frequency and schedule.

```markdown
* * * * *
| | | | |
| | | | +---- Day of the Week   (range: 0-6, 0 is Sunday)
| | | +------ Month of the Year (range: 1-12)
| | +-------- Day of the Month  (range: 1-31)
| +---------- Hour              (range: 0-23)
+------------ Minute            (range: 0-59)
```
. . .

<br>

```{.markdown code-line-numbers="|1|2|3|5|6" filename="crontab file"}
# Comment lines start with hastags
0 0 * * * echo 'Hello midnight!'
0 0 1 1 * echo 'Hello New Year!'
0 0 25 * * echo 'Hello payday!'
* * * * * Rscript -e 'print("Hello R!")'
* * * * * python -c 'print("Hello Python!")'
```

<br>

. . . 

Cron's syntax is richer than this. To learn more you can go to   [crontab.guru](crontab.guru).


<br>
<br>
<br>

::: aside
Adapted from: [https://www.maximehuran.fr/en/create-a-cron-job-with-magento-2/](https://www.maximehuran.fr/en/create-a-cron-job-with-magento-2/)
:::

::: {.notes}
This is a simplified version. Cron has a richer syntax than this.
:::

## Existing tools: cronR {.smaller}

- Origionally by Kevin Ushey, but maintained by Jan Wijffels.
- Helpers for writing Cron expressions and writing to crontab files.


. . .

::: {style="font-size:0.8em"}

```{r eval=TRUE, message=TRUE}
#| code-line-numbers: "|5-6"
library(cronR)

cron_add(
  command = "Rscript -e 'print(\"Hello R!\")'",
  frequency = 'daily', 
  at='7AM',
  dry_run = TRUE,
  ask = FALSE
)
```

:::

::: {.notes}
There is something similar for Windows with taskscheduleR, also by Jan Wijffels.

The drawback of this is that it's not friendly to version control.

I know there are people out there who have tried to program around Cron.
:::

## Existing tools: Apache Airflow {.smaller}

- Perhaps the most mature and well understood automation tool.
- Started by Airbnb. Open source and with a community of developers.
- Structured around Directed Acyclic Graphs (DAGs).
- GUI capabilities.

:::{style="text-align: center;"}
![](airflow-image.png)
:::

::: aside
Image source: [https://pypi.org/project/apache-airflow/](https://pypi.org/project/apache-airflow/)
:::

## Existing tools: Apache Airflow (2)  {.smaller}

<br>

::: {style="font-size:0.85em"}

```{python eval=FALSE, python.reticulate = FALSE}
#| code-line-numbers: "|1-3|5-6|8-14|16-18"
from datetime import datetime
from airflow import DAG
from airflow.operators.python_operator import PythonOperator

def print_hello():
    return 'Hello world from first Airflow DAG!'

dag = DAG(
  'hello_world', 
  description = 'Hello World DAG',
  schedule_interval = '0 12 * * *',
  start_date = datetime(2017, 3, 20), 
  catchup = False
)

hello_operator = PythonOperator(task_id='hello_task',
                                python_callable = print_hello, 
                                dag = dag)
```

:::

<br>
<br>

::: aside
Adapted from: [https://progressivecoder.com/airflow-dag-example-create-your-first-dag/](https://progressivecoder.com/airflow-dag-example-create-your-first-dag/)
:::

::: {.notes}
Airflow is really the Swiss army knife of automation.

Written in Python. You also write DAGs as Python. 

You can execute R, but you do so as command line.
:::

## Existing tools: Others

- Windows Task Scheduler 
  - Seems heavily tied into Windows.
- RStudio Connect
  - Useful, but seemed clunky.
  - Good at managing R dependencies.
  - Still very GUI based.
  
## Existing tools: summary {.smaller}

<br>

|             | Cron | Apache Airflow | Github actions | RStudio Connect |
|-------------|------|----------------|----------------|-----------------|
| Easy to use^[Footnote] | &#9989;     |                |                |                 |
|             | &#10060;     |                |                |                 |
|             | &#128993;
     |                |                |                 |
     
: {tbl-colwidths="[40,15,15,15,15]"}

<br>
<br>

:::{style="text-align: center;"}
# Demo time! 
:::

:::{style="text-align: center;"}
# Thank you! 

Questions?
:::