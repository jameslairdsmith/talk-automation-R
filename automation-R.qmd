---
format:
  revealjs: 
    slide-number: true
    css: styles.css
    slide-level: 3
    mouse-wheel: true
    execute:
      echo: true
      warning: false
    output-file: index.html
    show-notes: false
---

## Automating tasks with R {style="margin-top: 2em;"}

::: {style="margin-bottom: 1em; font-size: 0.75em"}
James Laird-Smith

Data Scientist, Bank of England
:::

```{r}
#| include: false
old.hooks <- fansi::set_knit_hooks(knitr::knit_hooks)
options(crayon.enabled=TRUE)
```

<!-- ::: {style="margin-top: 8em; margin-bottom: 1em; font-size: 0.5em; color: grey"} -->
<!-- - Link to slides: [talk-automation-R.jameslairdsmith.com/](https://talk-automation-R.jameslairdsmith.com/) -->
<!-- - Github repo for talk: [jameslairdsmith/talk-automation-R](https://github.com/jameslairdsmith/talk-automation-R) -->
<!-- ::: -->

::: {style="font-size:0.5em"}
- Link to slides: [talk-automation-R.jameslairdsmith.com/](https://talk-automation-R.jameslairdsmith.com/)
- Github repo for talk: [jameslairdsmith/talk-automation-R](https://github.com/jameslairdsmith/talk-automation-R)
:::

![](https://upload.wikimedia.org/wikipedia/en/thumb/7/72/Bank_of_England_logo.svg/400px-Bank_of_England_logo.svg.png?20220630040920){.absolute width="300" height="300" right=150 top="150"}

## Agenda

- Why learn to automate?
- What tools are available for automation?
- The future?

## Why learn automation? {.smaller}

Automation is the logical extension of coding.


:::{.callout-note icon=false appearance="minimal"}
Given that you have some operation.
:::

. . .

<u>Step 1: Re-write in code</u>

- Pain: Learn to code
- Gain: Can then re-run at zero effort (among other things)

. . .

<u>Step 2: Automate</u>

- Pain: Learn an automation tool
- Gain: Can then re-run at zero effort **even when you are not there**

::: {.notes}
I see automation as the logical extension of coding.
It is particularly important for organisations.
:::

## How can you automate? {.smaller}

:::{.callout-note}
R itself is not an automation tool. 
Rather, it interfaces with other purpose-built tools.
:::

- Cron
- Apache Airflow
- Windows Task Scheduler
- RStudio Connect
- Jenkins
- Github actions
- Many more...

**R does have tools for interfacing with these.**

::: {.notes}
No programming language is actually an automation tool.

To have an automation tool, you need an always on server with a daemon running in the background.

I'm betting that for many of you, automation is something hidden away, mysterious.

Varying levels of maturity and sophistication.

These each have their pros and cons.
:::


## What do we want? {.smaller}

What does an ideal automation tool look like?

<br>

- Simple to use.
- Feature rich. Eg. have triggers (or listeners).
  
. . .

- Developer friendly. Eg. Have an API
- User friendly. Eg. Have a good graphical interface (GUI).

. . . 

- Free and open source with no vendor lock-in.
- Language agnostic? Or at least work with R?

::: {.notes}
I want to prime you to think about what you would want out of an automation tool.

All automation tools will have a way to trigger events on a schedule, only 
some will allow you to create triggers.
:::

## Cron {.smaller}

> In the beginning God created the heavens and the earth ... but also the Cron utility for Unix.^[Gospel according to James.]

. . .

::: {.incremental}
- Very old, widely used and well understood.
  - If you are running MacOS or Linux, it's likely already on your computer.
- Minimal and easy to get started with.
- Cron syntax is the lingua franca of automation. Other tools will accept it as input.
:::

<br>
<br>
<br>

::: {.notes}
These things make Cron a good tool to get started with.
:::

## Cron expressions {.smaller}

Cron has it's own syntax for job frequency and schedule.

```markdown
* * * * *
| | | | |
| | | | +---- Day of the Week   (range: 0-6, 0 is Sunday)
| | | +------ Month of the Year (range: 1-12)
| | +-------- Day of the Month  (range: 1-31)
| +---------- Hour              (range: 0-23)
+------------ Minute            (range: 0-59)
```
. . .

<br>

```{.markdown code-line-numbers="|1|2|3|5|6|7" filename="crontab file"}
# Comment lines start with hastags
0 0 * * * echo 'Hello midnight!'
0 0 1 1 * echo 'Hello New Year!'
0 0 25 * * echo 'Hello payday!'
0 0 * * 6 echo 'Hello Saturday!'
* * * * * Rscript -e 'print("Hello R!")'
* * * * * python -c 'print("Hello Python!")'
```

<br>

. . . 

Cron's syntax is richer than this. To learn more you can go to   [crontab.guru](crontab.guru) or consult the [spec](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07) here.


<br>
<br>

::: aside
Adapted from: [https://www.maximehuran.fr/en/create-a-cron-job-with-magento-2/](https://www.maximehuran.fr/en/create-a-cron-job-with-magento-2/)
:::

::: {.notes}
This is a simplified version. Cron has a richer syntax than this.
:::

## cronR {.smaller}

- Originally by Kevin Ushey, but maintained by Jan Wijffels.
- Helpers for writing Cron expressions and writing to crontab files.


. . .

::: {style="font-size:0.8em"}

```{r eval=TRUE, message=TRUE}
#| code-line-numbers: "|5-6"
library(cronR)

cron_add(
  command = "Rscript -e 'print(\"Hello R!\")'",
  frequency = 'daily', 
  at='7AM',
  dry_run = TRUE,
  ask = FALSE
)
```

:::

::: {.notes}
There is something similar for Windows with taskscheduleR, also by Jan Wijffels.

The drawback of this is that it's not friendly to version control.

I know there are people out there who have tried to program around Cron.
:::

## Apache Airflow {.smaller}

> Airflow is a platform [...] to programmatically author, schedule and monitor workflows^[https://airflow.apache.org/]

. . .

- Perhaps the most mature and well understood modern automation tool for data.
- Fully featured and extensible.

. . . 

<hr>

- Started by Airbnb. 
- Open source and with a community of developers.

. . . 

<hr> 

- Powerful GUI.
- Notable for it's use of Directed Acyclic Graphs (DAGs).


<br>

::: {.notes}
Strong focus on data engineering.
:::

## Apache Airflow (2) {.smaller}

:::{style="text-align: center;"}
![](airflow-image.png)
:::

<br>

::: aside
Image source: [https://pypi.org/project/apache-airflow/](https://pypi.org/project/apache-airflow/)
:::

::: {.notes}
Any set of tasks is going to have dependencies. Without a DAG, you are going
to have to manage those dependencies manually. This means you are going to have to program your own trigger/sensor.
:::

## Apache Airflow (3)  {.smaller}

<br>

::: {style="font-size:0.85em"}

```{python eval=FALSE, python.reticulate = FALSE}
#| code-line-numbers: "|1-3|5-6|8-14|16-18"
from datetime import datetime
from airflow import DAG
from airflow.operators.python_operator import PythonOperator

def print_hello():
    return 'Hello world from first Airflow DAG!'

dag = DAG(
  'hello_world', 
  description = 'Hello World DAG',
  schedule_interval = '0 12 * * *',
  start_date = datetime(2017, 3, 20), 
  catchup = False
)

hello_operator = PythonOperator(task_id='hello_task',
                                python_callable = print_hello, 
                                dag = dag)
```

:::

<br>
<br>

::: aside
Adapted from: [https://progressivecoder.com/airflow-dag-example-create-your-first-dag/](https://progressivecoder.com/airflow-dag-example-create-your-first-dag/)
:::

::: {.notes}
Airflow is really the industry giant of automation.

Written in Python, but deeply intertwined with Python.

You can execute R, but you do so as command line.
:::

## GitHub Actions {.smaller}

::: {.incremental}
- Widely used as part of package testing (sometimes called CI/CD).
- Triggers can be repo events (like push and merge) or Cron schedules.
- Workflows are specified in YAML.
- Good support for R from work done by RStudio: 
  - See: [https://github.com/r-lib/actions](https://github.com/r-lib/actions)
:::

. . . 


```{.markdown}
name: GitHub Actions Demo
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ Job automatically triggered by ${{ github.event_name }}."
      - run: echo "üçè This job's status is ${{ job.status }}."
```

<br>
<br>

::: {.aside}
There is also GitLab, the free version of which you could run on a Server.
:::

## Existing tools: Others

- Windows Task Scheduler 
  - Heavily tied into Windows.
  - Your PC always has to be on.
- RStudio Connect
  - Good at managing R dependencies.
  - Scheduling still very GUI based.
- Nothing really has the feature set of Airflow.
  
## Existing tools: summary {.smaller}

|                         | Cron                          | Airflow                                                                                                                  | GitHub Actions | RStudio Connect                                                 |
|-------------------------|-------------------------------|--------------------------------------------------------------------------------------------------------------------------|----------------|-----------------------------------------------------------------|
| Easy to use             | &#9989;                       | &#128993;^[It's quite a lot of setup and you need to know Python.]                                                       | &#9989;        | &#9989;                                                         |
| Trigger and DAG support | &#10060;                      | &#9989;                                                                                                                  | &#10060;       | &#10060;                                                        |
| Good R support          | &#128993;^[We do have cronR.] | &#10060;                                                                                                                 | &#9989;        | &#9989;&#9989;                                                  |
| Language agnostic       | &#9989;                       | &#128993;^[The API is language agnostic, but you can't create DAGs with it right now (although this might be changing).] | &#9989;        | &#10060;                                                        |
| Has an API              | &#10060;                      | &#9989;                                                                                                                  | &#9989;        | &#128993;^[It exists, but I'm not sure of scheduling bindings?] |
| Nice GUI                | &#10060;                      | &#9989;&#9989;                                                                                                           | &#9989;        | &#9989;                                                         |
| Free & open source      | &#9989;                       | &#9989;                                                                                                                  | &#10060;       | &#10060;                                                        |
| Not tied to a vendor    | &#9989;                       | &#9989;                                                                                                                  | &#10060;       | &#10060;                                                        |

: {tbl-colwidths="[40,15,15,15,15]"}

<br>
<br>
<br>
<br>

## The future^[...or at least what I think we should do.] {.smaller}

. . . 

Focus on the open source technologies.

<br>

. . . 

- **Cron for the simpler automations**
  - Synchronise crontab from a YAML file.

. . .

- **Apache Airflow for the large scale deployments**
  - R bindings to the API.
  - Create DAGs in R? Transpile them to Python?

<br>
<br>


:::{style="text-align: center;"}
# Thank you! 

Questions?
:::